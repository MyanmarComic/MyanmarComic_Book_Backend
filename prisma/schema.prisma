// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Series {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(255)
  description   String    @db.VarChar(2000)
  likes         Int       @default(0)
  views         Int       @default(0)
  genere        String
  status        String
  episodes      Int       @default(0)
  rating        Float     @default(0)
  coverImageKey String? // S3 key for the cover image
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  published     Boolean   @default(true)
  chapters      Chapter[]
  Image         Image[]
}

model Image {
  id         Int      @id @default(autoincrement())
  s3Key      String // e.g. "series/1/2/page1.jpg"
  url        String // e.g. "https://your-bucket.s3.amazonaws.com/series/1/2/page1.jpg"
  seriesId   Int
  chapterId  Int
  uploadedAt DateTime @default(now())

  // relations
  series Series @relation(fields: [seriesId], references: [id], onDelete: Cascade)
}

model Chapter {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  chapterId Int
  seriesId  Int
  published Boolean  @default(true)
  views     Int      @default(0) // Number of views for this chapter
  series    Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           Int     @id @default(autoincrement())
  username     String  @unique
  password     String
  refreshToken String? // nullable, as the user might not be logged in
}

model Category {
  id                   Int      @id @default(autoincrement())
  category_name        String   @db.VarChar(255)
  category_cover       String   @db.Text
  category_description String?  @db.Text
  created_at           DateTime @default(now())
  updated_at           DateTime
  deleted_at           DateTime?
  created_by           Int?
  updated_by           Int?
  deleted_by           Int?

  books Book[]
}

model Book {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  image_link  String   @db.Text
  description String?  @db.Text
  total_items Int      @default(0)
  author      String?  @db.VarChar(255)

  category_id Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  created_at  DateTime @default(now())
  updated_at  DateTime
  deleted_at  DateTime?
  created_by  Int?
  updated_by  Int?
  deleted_by  Int?

  items  Item[]
  tags   BookTag[]

  @@index([category_id], name: "Book_category_id_fkey")
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  image_link  String?  @db.Text
  content     String?  @db.Text
  author      String?  @db.VarChar(255)

  book_id     Int
  book        Book     @relation(fields: [book_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  created_at  DateTime @default(now())
  updated_at  DateTime
  deleted_at  DateTime?
  created_by  Int?
  updated_by  Int?
  deleted_by  Int?

  @@index([book_id], name: "Item_book_id_fkey")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime
  deleted_at DateTime?
  created_by Int?
  updated_by Int?
  deleted_by Int?

  books BookTag[]
}

// Explicit M:N because the join table has extra columns (assigned_at, assigned_by)
model BookTag {
  book_id     Int
  tag_id      Int
  assigned_at DateTime @default(now())
  assigned_by Int?

  book Book @relation(fields: [book_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@id([book_id, tag_id])
  @@index([tag_id], name: "BookTag_tag_id_fkey")
}
  